// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repo

import (
	"context"
	"database/sql"
)

const createCredentials = `-- name: CreateCredentials :exec
INSERT INTO credentials ( user_id, password) VALUES($1,crypt($2,'crypt-des'))
`

type CreateCredentialsParams struct {
	UserID string
	Crypt  string
}

func (q *Queries) CreateCredentials(ctx context.Context, arg CreateCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, createCredentials, arg.UserID, arg.Crypt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, date_of_birth, parent_code) VALUES ($1, $2, $3, $4) RETURNING id, username, parent_code, date_of_birth, created
`

type CreateUserParams struct {
	ID          string
	Username    string
	DateOfBirth sql.NullTime
	ParentCode  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.DateOfBirth,
		arg.ParentCode,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ParentCode,
		&i.DateOfBirth,
		&i.Created,
	)
	return i, err
}

const createUserV2 = `-- name: CreateUserV2 :one
    BEGIN
`

type CreateUserV2Row struct {
}

func (q *Queries) CreateUserV2(ctx context.Context) (CreateUserV2Row, error) {
	row := q.db.QueryRowContext(ctx, createUserV2)
	var i CreateUserV2Row
	err := row.Scan()
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, parent_code, date_of_birth, created FROM users where id == $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ParentCode,
		&i.DateOfBirth,
		&i.Created,
	)
	return i, err
}
