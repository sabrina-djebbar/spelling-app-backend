// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repo

import (
	"context"
	"database/sql"
)

const addWordToSet = `-- name: AddWordToSet :exec
INSERT INTO spelling_set_words(set_id, word_id) VALUES ($1, $2)
`

type AddWordToSetParams struct {
	SetID  string
	WordID string
}

func (q *Queries) AddWordToSet(ctx context.Context, arg AddWordToSetParams) error {
	_, err := q.db.ExecContext(ctx, addWordToSet, arg.SetID, arg.WordID)
	return err
}

const createSpellingSet = `-- name: CreateSpellingSet :one
INSERT INTO spelling_set(id, name, recommended_age, description, tags, creator) VALUES ($1, $2,$3,$4,$5, $6) RETURNING id, name, recommended_age, description, tags, creator, created
`

type CreateSpellingSetParams struct {
	ID             string
	Name           string
	RecommendedAge int32
	Description    sql.NullString
	Tags           sql.NullString
	Creator        string
}

func (q *Queries) CreateSpellingSet(ctx context.Context, arg CreateSpellingSetParams) (SpellingSet, error) {
	row := q.db.QueryRowContext(ctx, createSpellingSet,
		arg.ID,
		arg.Name,
		arg.RecommendedAge,
		arg.Description,
		arg.Tags,
		arg.Creator,
	)
	var i SpellingSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RecommendedAge,
		&i.Description,
		&i.Tags,
		&i.Creator,
		&i.Created,
	)
	return i, err
}

const createSpellingWord = `-- name: CreateSpellingWord :one
INSERT INTO spelling_word (id, spelling, difficulty, definition, total_available_points, class, tags) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, spelling, definition, class, tags, difficulty, total_available_points, created
`

type CreateSpellingWordParams struct {
	ID                   string
	Spelling             string
	Difficulty           float64
	Definition           sql.NullString
	TotalAvailablePoints int32
	Class                string
	Tags                 sql.NullString
}

func (q *Queries) CreateSpellingWord(ctx context.Context, arg CreateSpellingWordParams) (SpellingWord, error) {
	row := q.db.QueryRowContext(ctx, createSpellingWord,
		arg.ID,
		arg.Spelling,
		arg.Difficulty,
		arg.Definition,
		arg.TotalAvailablePoints,
		arg.Class,
		arg.Tags,
	)
	var i SpellingWord
	err := row.Scan(
		&i.ID,
		&i.Spelling,
		&i.Definition,
		&i.Class,
		&i.Tags,
		&i.Difficulty,
		&i.TotalAvailablePoints,
		&i.Created,
	)
	return i, err
}

const getSpellingWord = `-- name: GetSpellingWord :one
SELECT id, spelling, definition, class, tags, difficulty, total_available_points, created FROM spelling_word where id = $1
`

func (q *Queries) GetSpellingWord(ctx context.Context, id string) (SpellingWord, error) {
	row := q.db.QueryRowContext(ctx, getSpellingWord, id)
	var i SpellingWord
	err := row.Scan(
		&i.ID,
		&i.Spelling,
		&i.Definition,
		&i.Class,
		&i.Tags,
		&i.Difficulty,
		&i.TotalAvailablePoints,
		&i.Created,
	)
	return i, err
}

const getWordDifficulty = `-- name: GetWordDifficulty :one
SELECT difficulty from spelling_word where id = $1
`

func (q *Queries) GetWordDifficulty(ctx context.Context, id string) (float64, error) {
	row := q.db.QueryRowContext(ctx, getWordDifficulty, id)
	var difficulty float64
	err := row.Scan(&difficulty)
	return difficulty, err
}
